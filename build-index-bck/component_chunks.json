[
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Mask/index.tsx::__function_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Mask/index.tsx::__function",
    "component_name": "__function",
    "file": "Custom-ui/src/components/Mask/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: __function | Description: A functional React component with side effects capabilities. | Location: components/Mask/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Mask/index.tsx::__function_code",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Mask/index.tsx::__function",
    "component_name": "__function",
    "file": "Custom-ui/src/components/Mask/index.tsx",
    "chunk_type": "code",
    "text": "__function implementation: HTMLAttributes<HTMLDivElement>, { open: boolean; } > & { transitionConfig?: object; }; const Mask = ({ className, open, transitionConfig, style, ...props }: MaskProps) => { const transitions = useTransition( open, transitionConfig ? { ...transitionConfig } : { from: { opacity: 0 }, enter: { opacity: 1 }, leave: { opacity: 0 }, reverse: open, } ); return transitions( (styles, item) => item && ( <AnimatedDiv className={cx( \"fixed left-0 top-0 w-full h-full bg-[rgba(0,0,0,0.4)] z-[200] contain-strict\", className )} style={{ ...style, ...styles }} {...props} /> ) ); };"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Anchor/index.tsx::Anchor_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Anchor/index.tsx::Anchor",
    "component_name": "Anchor",
    "file": "Custom-ui/src/components/Anchor/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Anchor | Description: A Anchor page component with stateful, side effects capabilities. | Location: components/Anchor/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Anchor/index.tsx::Anchor_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Anchor/index.tsx::Anchor",
    "component_name": "Anchor",
    "file": "Custom-ui/src/components/Anchor/index.tsx",
    "chunk_type": "code",
    "text": "Anchor code part 1: \"use client\" useEffect, useCallback, MouseEvent, Dispatch, useReducer, from \"react\" title: string href: string interface AnchorState isActive: string isUserNaved: boolean defaultActive: string const AnchorReducer = ( state: AnchorState, action: type: string value: string | boolean ) => switch (action type) case \"setIsActive\": return state, isActive: action value as string case \"setIsUserNaved\": return state, isUserNaved: action value as boolean case \"setDefaultActive\": return"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Anchor/index.tsx::Anchor_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Anchor/index.tsx::Anchor",
    "component_name": "Anchor",
    "file": "Custom-ui/src/components/Anchor/index.tsx",
    "chunk_type": "code",
    "text": "Anchor code part 2: state, defaultActive: action value as string default: return state const Anchor: React FC< items: AnchorItem[] > = ( items ) => const [state, dispatch] = useReducer(AnchorReducer, isActive: items[0] href, isUserNaved: false, defaultActive: items[0] href, ) return ( <> items map((item) => ( <NavItem key= item href item anchorState= state anchorDispatch= dispatch /> )) </> ) const NavItem: React FC< title: string href: string anchorState: AnchorState anchorDispatch: Dispatch< type: string"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Anchor/index.tsx::Anchor_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Anchor/index.tsx::Anchor",
    "component_name": "Anchor",
    "file": "Custom-ui/src/components/Anchor/index.tsx",
    "chunk_type": "code",
    "text": "Anchor code part 3: value: string | boolean > > = ( title, href, anchorState, anchorDispatch ) => const mainScrollerDistance = useMainScrollerDistance() const isActive, isUserNaved, defaultActive = anchorState const handleClick = useCallback( (e: MouseEvent) => e preventDefault() const targetElement = document getElementById(href) if (targetElement) anchorDispatch( type: \"setIsUserNaved\", value: true ) anchorDispatch( type: \"setIsActive\", value: href ) targetElement scrollIntoView( behavior: \"smooth\" )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Anchor/index.tsx::Anchor_code_3",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Anchor/index.tsx::Anchor",
    "component_name": "Anchor",
    "file": "Custom-ui/src/components/Anchor/index.tsx",
    "chunk_type": "code",
    "text": "Anchor code part 4: setTimeout( () => anchorDispatch( type: \"setIsUserNaved\", value: false, ), 1000 ) , [href] ) useEffect(() => const handleScroll = () => if (isUserNaved) return const targetElement = document getElementById(href) if (!targetElement) return const rect = targetElement getBoundingClientRect() if (href === defaultActive) if (rect bottom >= 2) anchorDispatch( type: \"setIsActive\", value: \"aboutUs\" ) return if (rect top <= 2 && rect bottom >= 2) anchorDispatch( type: \"setIsActive\", value: href ) window"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Anchor/index.tsx::Anchor_code_4",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Anchor/index.tsx::Anchor",
    "component_name": "Anchor",
    "file": "Custom-ui/src/components/Anchor/index.tsx",
    "chunk_type": "code",
    "text": "Anchor code part 5: addEventListener(\"scroll\", handleScroll) return () => window removeEventListener(\"scroll\", handleScroll) , [href, isUserNaved]) return ( <div className= cx( \"flex items-center mx-24px h-full no-underline cursor-pointer\", mainScrollerDistance > 1 ? \"text-#323233 hover:text-#FFA14A\" : \"text-#FFFFFF\", isActive === href && \"border-b-3px font-semibold\", isActive === href && mainScrollerDistance > 1 && \"!text-#FFA14A\" ) onClick= handleClick > title </div> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Animation/elements.tsx::AnimatedDiv_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Animation/elements.tsx::AnimatedDiv",
    "component_name": "AnimatedDiv",
    "file": "Custom-ui/src/components/Animation/elements.tsx",
    "chunk_type": "basic_info",
    "text": "Component: AnimatedDiv | Description: A functional React component. | Location: components/Animation/elements.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Animation/elements.tsx::AnimatedDiv_code",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Animation/elements.tsx::AnimatedDiv",
    "component_name": "AnimatedDiv",
    "file": "Custom-ui/src/components/Animation/elements.tsx",
    "chunk_type": "code",
    "text": "AnimatedDiv implementation: <a.div {...props} /> );"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/BasicTabs/index.tsx::BasicTabs_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/BasicTabs/index.tsx::BasicTabs",
    "component_name": "BasicTabs",
    "file": "Custom-ui/src/components/Tabs/BasicTabs/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: BasicTabs | Description: A BasicTabs layout component with stateful capabilities. | Location: Tabs/BasicTabs/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/BasicTabs/index.tsx::BasicTabs_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/BasicTabs/index.tsx::BasicTabs",
    "component_name": "BasicTabs",
    "file": "Custom-ui/src/components/Tabs/BasicTabs/index.tsx",
    "chunk_type": "code",
    "text": "BasicTabs code part 1: 'use client' id: number title: string content: JSX Element interface TabsProps items: Item[] defaultActiveId: number wrapperClassName?: string navClassName?: string navItemClassName?: string activeNavItemClassName?: string bodyClassName?: string onTabChange?: (id: number) => void const BasicTabs: React FC<TabsProps> = ( items, defaultActiveId, navClassName, navItemClassName, activeNavItemClassName, bodyClassName, wrapperClassName, onTabChange, ) =>"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/BasicTabs/index.tsx::BasicTabs_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/BasicTabs/index.tsx::BasicTabs",
    "component_name": "BasicTabs",
    "file": "Custom-ui/src/components/Tabs/BasicTabs/index.tsx",
    "chunk_type": "code",
    "text": "BasicTabs code part 2: const [activeId, setActiveId] = useState(defaultActiveId) const handleTabChange = useCallback((id: number) => setActiveId(id) onTabChange? (id) , []) return ( <div className= cx( 'pt-[26px] pb-[11px] px-[14px] flex flex-col rounded-[15px] bg-[#ffffff]', wrapperClassName ) > <div className= cx( 'flex flex-row h-[36px] border-b border-b-solid border-[#EBEDF0] overflow-hidden', navClassName ) > items map((item) => ( <TabNavItem title= item title setActiveId= handleTabChange id= item id activeId="
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/BasicTabs/index.tsx::BasicTabs_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/BasicTabs/index.tsx::BasicTabs",
    "component_name": "BasicTabs",
    "file": "Custom-ui/src/components/Tabs/BasicTabs/index.tsx",
    "chunk_type": "code",
    "text": "BasicTabs code part 3: activeId key= `$ item id -tab` navItemClassName= navItemClassName activeNavItemClassName= activeNavItemClassName /> )) </div> <div className= cx('py-[12px] w-full', bodyClassName) > items map((item) => ( <TabContent activeId= activeId id= item id content= item content key= `$ item id -content` /> )) </div> </div> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Button/index.tsx::Button_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Button/index.tsx::Button",
    "component_name": "Button",
    "file": "Custom-ui/src/components/Button/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Button | Description: A button component with ref forwarding capabilities. | Location: components/Button/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Button/index.tsx::Button_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Button/index.tsx::Button",
    "component_name": "Button",
    "file": "Custom-ui/src/components/Button/index.tsx",
    "chunk_type": "code",
    "text": "Button code part 1: createElement, forwardRef, type ReactNode, type PropsWithChildren, from 'react' variant?: 'contained' | 'outlined' | 'text' | 'link' color?: 'primary' | 'green' | 'white' size?: 'mini' | 'small' | 'medium' | 'large' shape?: 'rect' | 'circle' | 'round' fullWidth?: boolean loading?: boolean icon?: ReactNode startIcon?: ReactNode endIcon?: ReactNode href?: string target?: '_blank' | '_self' | '_parent' | '_top' const Button = forwardRef<HTMLButtonElement, PropsWithChildren<Props>>( ("
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Button/index.tsx::Button_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Button/index.tsx::Button",
    "component_name": "Button",
    "file": "Custom-ui/src/components/Button/index.tsx",
    "chunk_type": "code",
    "text": "Button code part 2: children, className, variant = 'contained', color = 'primary', size = 'medium', shape = 'rect', disabled = false, fullWidth = false, loading = false, icon, startIcon, endIcon, props , _forwardRef ) => return createElement( props href ? 'a' : 'button', className: cx( `fui-button fui-button--$ variant fui-button--$ color fui-button--$ size fui-button--$ shape `, fullWidth && 'fui-button--fullWidth', loading && 'is-loading', disabled && 'is-disabled', className ), ref: _forwardRef, props, , <>"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Button/index.tsx::Button_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Button/index.tsx::Button",
    "component_name": "Button",
    "file": "Custom-ui/src/components/Button/index.tsx",
    "chunk_type": "code",
    "text": "Button code part 3: startIcon && ( <span className=\"fui-button__icon\"> renderReactNode(startIcon) </span> ) children && ( <div className= cx( 'flex flex-row h-full', loading && 'cursor-not-allowed' ) > <div className=\"w-24px h-24px\"> loading && <Spin className=\"mr-8px text-1 4em \" /> </div> children </div> ) !children && icon && ( <span className=\"fui-button__icon\"> renderReactNode(icon) </span> ) endIcon && ( <span className=\"fui-button__icon\"> renderReactNode(endIcon) </span> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Button/index.tsx::Button_code_3",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Button/index.tsx::Button",
    "component_name": "Button",
    "file": "Custom-ui/src/components/Button/index.tsx",
    "chunk_type": "code",
    "text": "Button code part 4: loading && <Spin className=\"fui-button__loading\" /> </> ) )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Canvas/index.tsx::Canvas_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Canvas/index.tsx::Canvas",
    "component_name": "Canvas",
    "file": "Custom-ui/src/components/Canvas/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Canvas | Description: A functional React component with side effects capabilities. | Location: components/Canvas/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Canvas/index.tsx::Canvas_props",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Canvas/index.tsx::Canvas",
    "component_name": "Canvas",
    "file": "Custom-ui/src/components/Canvas/index.tsx",
    "chunk_type": "props",
    "text": "Canvas component props: | draw - type: (ctx: CanvasRenderingContext2D) => void - description: Callback function for draw - required"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Canvas/index.tsx::Canvas_code",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Canvas/index.tsx::Canvas",
    "component_name": "Canvas",
    "file": "Custom-ui/src/components/Canvas/index.tsx",
    "chunk_type": "code",
    "text": "Canvas implementation: interface CanvasProps extends ComponentProps<'canvas'> { draw: (ctx: CanvasRenderingContext2D) => void; } const canvasRef = useRef<HTMLCanvasElement>(null); useEffect(() => { const canvas = canvasRef.current; if (canvas) { const ctx = canvas.getContext('2d'); if (ctx) { draw(ctx); } } }, [draw]); return <canvas ref={canvasRef} {...rest} />; };"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/utils/composeRef.ts::default_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/utils/composeRef.ts::default",
    "component_name": "default",
    "file": "Custom-ui/src/utils/composeRef.ts",
    "chunk_type": "basic_info",
    "text": "Component: default | Description: A functional React component. | Location: src/utils/composeRef.ts"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/utils/composeRef.ts::default_code",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/utils/composeRef.ts::default",
    "component_name": "default",
    "file": "Custom-ui/src/utils/composeRef.ts",
    "chunk_type": "code",
    "text": "default implementation: let refs: Ref<T>[]; if (arguments.length === 1 && arguments[0] instanceof Array) refs = arguments[0]; else refs = Array.from(arguments); return (ref: T) => { refs.forEach((r) => { if (r !== null && typeof r === 'object' && 'current' in r) (r as any).current = ref; if (typeof r === 'function') r(ref); }); }; }"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/layout.tsx::default_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/layout.tsx::default",
    "component_name": "default",
    "file": "Custom-ui/src/app/layout.tsx",
    "chunk_type": "basic_info",
    "text": "Component: default | Description: A default layout component. | Location: src/app/layout.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/layout.tsx::default_code",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/layout.tsx::default",
    "component_name": "default",
    "file": "Custom-ui/src/app/layout.tsx",
    "chunk_type": "code",
    "text": "default implementation: title: 'Custome UI', description: 'react component library by Ricy' }; children, }: { children: React.ReactNode; }) { return ( <html lang=\"en\"> <body className=\"min-h-100vh\"> <ModalRender /> {children} </body> </html> ); }"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Dropdown/index.tsx::Dropdown_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Dropdown/index.tsx::Dropdown",
    "component_name": "Dropdown",
    "file": "Custom-ui/src/components/Dropdown/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Dropdown | Description: A tooltip component. | Location: components/Dropdown/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Dropdown/index.tsx::Dropdown_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Dropdown/index.tsx::Dropdown",
    "component_name": "Dropdown",
    "file": "Custom-ui/src/components/Dropdown/index.tsx",
    "chunk_type": "code",
    "text": "Dropdown code part 1: type DropdownProps = OverWrite< PopoverProps, trigger?: \"hover\" | \"focus\" | \"click\" interactionProps?: InteractionProps > const Dropdown: React FC<DropdownProps> = ( Content, trigger = \"hover\", children, options = placement: \"bottom-end\", , interactionProps = handleClose: safePolygon(), , props ) => return ( <Popover Content= Content trigger= trigger options= options props interactionProps= interactionProps transitionStylesProps= duration: 200, initial: maxHeight: \"0px\" , open: maxHeight: \"500px\""
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Dropdown/index.tsx::Dropdown_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Dropdown/index.tsx::Dropdown",
    "component_name": "Dropdown",
    "file": "Custom-ui/src/components/Dropdown/index.tsx",
    "chunk_type": "code",
    "text": "Dropdown code part 2: , common: overflow: \"hidden\" , > children </Popover> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons",
    "component_name": "Icons",
    "file": "Custom-ui/src/components/Icons/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Icons | Description: A Icons page component. | Location: components/Icons/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons",
    "component_name": "Icons",
    "file": "Custom-ui/src/components/Icons/index.tsx",
    "chunk_type": "code",
    "text": "Icons code part 1: interface IconProps extends ComponentProps<'svg'> iconClassName?: string className?: string return ( <svg width=\"22\" height=\"20\" viewBox=\"0 0 22 20\" xmlns=\"http://www w3 org/2000/svg\" > <path d=\"M13 3124 7 5703L11 0022 2 88933L8 69199 7 5703L3 52624 8 32092L7 26421 11 9645L6 38179 17 1094L11 0022 14 6803L15 6226 17 1094L14 7402 11 9645L18 4781 8 32092L13 3124 7 5703ZM20 7992 7 14245C21 1683 7 19608 21 3157 7 64967 21 0486 7 91001L16 3519 12 4882L17 4606 18 9528C17 5237 19 3204 17 1378 19 6007 16"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons",
    "component_name": "Icons",
    "file": "Custom-ui/src/components/Icons/index.tsx",
    "chunk_type": "code",
    "text": "Icons code part 2: 8077 19 4271L11 0022 16 375L5 19666 19 4271C4 86653 19 6007 4 48068 19 3204 4 54373 18 9528L5 65249 12 4882L0 955723 7 91001C0 68864 7 64967 0 836019 7 19608 1 20512 7 14245L7 69589 6 19929L10 5986 0 317648C10 7637 -0 0168128 11 2406 -0 0168115 11 4057 0 317649L14 3085 6 19929L20 7992 7 14245Z\" className=\"fill-#595A5B\" /> </svg> ) return ( <svg xmlns=\"http://www w3 org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1 5\" stroke=\"currentColor\" className= cx('w-6 h-6', className)"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons",
    "component_name": "Icons",
    "file": "Custom-ui/src/components/Icons/index.tsx",
    "chunk_type": "code",
    "text": "Icons code part 3: > <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" /> </svg> ) className, iconClassName, ) => return ( <svg width=\"14\" height=\"15\" viewBox=\"0 0 14 15\" className= className xmlns=\"http://www w3 org/2000/svg\" > <path d=\"M3 5 7 7065L6 10 207L10 5 5 7075L9 7925 5L6 8 793L4 2065 7L3 5 7 7065Z\" fill=\"#1E8E3E\" /> <path d=\"M3 11101 1 67971C4 26216 0 910543 5 61553 0 5 7 0 5C8 85652 0 5 10 637 1 2375 11 9497 2 55025C13 2625 3 86301 14 5 64348 14 7 5C14 8 88447 13 5895 10 2378 12"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons_code_3",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons",
    "component_name": "Icons",
    "file": "Custom-ui/src/components/Icons/index.tsx",
    "chunk_type": "code",
    "text": "Icons code part 4: 8203 11 389C12 0511 12 5401 10 9579 13 4373 9 67879 13 9672C8 3997 14 497 6 99224 14 6356 5 63437 14 3655C4 2765 14 0954 3 02922 13 4287 2 05026 12 4497C1 07129 11 4708 0 404603 10 2235 0 134506 8 86563C-0 13559 7 50776 0 00303298 6 1003 0 532846 4 82122C1 06266 3 54213 1 95987 2 44888 3 11101 1 67971ZM3 66658 12 4888C4 65328 13 1481 5 81332 13 5 7 13 5C8 5913 13 5 10 1174 12 8679 11 2426 11 7426C12 3679 10 6174 13 9 0913 13 7 5C13 6 31331 12 6481 5 15327 11 9888 4 16658C11 3295 3 17988 10 3925 2"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons_code_4",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons",
    "component_name": "Icons",
    "file": "Custom-ui/src/components/Icons/index.tsx",
    "chunk_type": "code",
    "text": "Icons code part 5: 41085 9 2961 1 95672C8 19975 1 5026 6 99335 1 38378 5 82946 1 61529C4 66558 1 8468 3 59648 2 41824 2 75736 3 25736C1 91825 4 09647 1 3468 5 16557 1 11529 6 32946C0 88378 7 49334 1 0026 8 69974 1 45673 9 7961C1 91085 10 8925 2 67989 11 8295 3 66658 12 4888Z\" className= cx('fill-#1E8E3E', iconClassName) /> </svg> ) className, iconClassName, ) => return ( <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" className= className xmlns=\"http://www w3 org/2000/svg\" > <path d=\"M14 7C14 3 13401 10 866 1"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons_code_5",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons",
    "component_name": "Icons",
    "file": "Custom-ui/src/components/Icons/index.tsx",
    "chunk_type": "code",
    "text": "Icons code part 6: 18292e-06 7 0C3 13401 -2 14186e-06 1 18292e-06 3 134 0 7C-2 14186e-06 10 866 3 134 14 7 14C10 866 14 14 10 866 14 7ZM4 67091 3 94754L7 00001 6 29075L9 32912 3 94754L10 0384 4 65251L7 70499 7L10 0383 9 34749L9 32911 10 0525L7 00001 7 70925L4 67092 10 0525L3 96168 9 34749L6 29503 7L3 96167 4 65251L4 67091 3 94754Z\" fill=\"#D93026\" /> </svg> ) className, iconClassName, props ) => return ( <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" className= className xmlns=\"http://www w3 org/2000/svg\" props"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons_code_6",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Icons/index.tsx::Icons",
    "component_name": "Icons",
    "file": "Custom-ui/src/components/Icons/index.tsx",
    "chunk_type": "code",
    "text": "Icons code part 7: > <circle cx=\"14\" cy=\"14\" r=\"12\" strokeWidth=\"4\" className= cx('stroke-#FFA14A fill-white', iconClassName) /> </svg> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input",
    "component_name": "Input",
    "file": "Custom-ui/src/components/Input/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Input | Description: A Input layout component with ref forwarding capabilities. | Location: components/Input/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input_props",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input",
    "component_name": "Input",
    "file": "Custom-ui/src/components/Input/index.tsx",
    "chunk_type": "props",
    "text": "Input component props: | error - type: string - description: Error message or error state - optional | wrapperClassName - type: string - description: String value for wrapperClassName - optional | outerPlaceholder - type: ReactElement<any> - description: React element for outerPlaceholder - optional | prefixIcon - type: string - description: String value for prefixIcon - optional | size - type: \"normal\" | \"small\" | \"medium\" - description: Size variant (small, medium, large) - optional | clearIcon - type: \"close\" | \"garbage\" - description: Union type value for clearIcon - optional"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input",
    "component_name": "Input",
    "file": "Custom-ui/src/components/Input/index.tsx",
    "chunk_type": "code",
    "text": "Input code part 1: \"use client\" useRef, forwardRef, useCallback, type ReactElement, type ComponentProps, from \"react\" type OverWrite<T, U> = Omit<T, keyof U> & U const setValue = Object getOwnPropertyDescriptor( window HTMLInputElement prototype, \"value\" )!? set! ComponentProps<\"input\">, error?: string wrapperClassName?: string outerPlaceholder?: ReactElement<any> prefixIcon?: string size?: \"normal\" | \"small\" | \"medium\" clearIcon?: \"close\" | \"garbage\" > const Input = forwardRef<HTMLInputElement, Props>( ("
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input",
    "component_name": "Input",
    "file": "Custom-ui/src/components/Input/index.tsx",
    "chunk_type": "code",
    "text": "Input code part 2: wrapperClassName, className, error, prefixIcon, id, size = \"normal\", disabled, defaultValue, clearIcon = \"close\", props , ref ) => const domRef = useRef<HTMLInputElement>(null!) const handleClickClear = useCallback(() => if (!domRef current || disabled) return setValue call(domRef current, String(\"\")) domRef current dispatchEvent(new Event(\"input\", bubbles: true )) domRef current focus() , [disabled]) const preventBlur = useCallback<React MouseEventHandler<HTMLInputElement>>( (evt) => evt"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input",
    "component_name": "Input",
    "file": "Custom-ui/src/components/Input/index.tsx",
    "chunk_type": "code",
    "text": "Input code part 3: preventDefault(), [] ) return ( <div className= cx( \"input-wrapper border-1px border-solid border-black\", `input--$ size `, wrapperClassName ) > prefixIcon && ( <span className= cx( prefixIcon, \"prefix-icon absolute left-0 top-[50%] -translate-y-[calc(50%+1px)] w-1 5em h-1 5em text-inner\" ) /> ) <input id= id ref= composeRef(ref, domRef) className= cx(\"input\", className) autoComplete=\"off\" disabled= disabled props /> !!error && ( <span id= id ? `$ id -error` : undefined className=\"input-error\">"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input_code_3",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input",
    "component_name": "Input",
    "file": "Custom-ui/src/components/Input/index.tsx",
    "chunk_type": "code",
    "text": "Input code part 4: error </span> ) <span className= cx( \"clear-icon display-none absolute top-1/2 -translate-y-1/2 justify-center items-center\", clearIcon === \"close\" ? \"right- 5em w-fit h-fit\" : \"right-1px w-1 3em h-1 3em rounded-full bg-purple-normal\" ) > <span className= cx( \"text-grey-normal-hover\", disabled ? \"cursor-default\" : \"cursor-pointer\", \"i-carbon:close-filled text-1em\": clearIcon === \"close\", \"i-ri:delete-bin-5-fill text- 85em\": clearIcon === \"garbage\", ) onClick= handleClickClear onMouseDown="
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input_code_4",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Input/index.tsx::Input",
    "component_name": "Input",
    "file": "Custom-ui/src/components/Input/index.tsx",
    "chunk_type": "code",
    "text": "Input code part 5: preventBlur /> </span> </div> ) )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/page.tsx::Page_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/page.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Page | Description: A Page page component. | Location: src/app/page.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/page.tsx::Page_code",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/page.tsx",
    "chunk_type": "code",
    "text": "Page implementation: return ( <main> <div className=\"text-48px\">Custom UI</div> <p>docs is developing</p> </main> ); }"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tooltip/page.tsx::Page_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tooltip/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/tooltip/page.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Page | Description: A Page page component. | Location: app/tooltip/page.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tooltip/page.tsx::Page_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tooltip/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/tooltip/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 1: \"use client\" const TooltipPage: React FC = () => return ( <div className=\"flex items-center justify-center gap-x-16px h-100vh\"> <PopoverContent Content= <div className=\"p-8px flex items-center h-32px border-1px border-solid border-#000000 rounded-32px bg-purple-500\"> Left suctomized Popover </div> trigger=\"hover\" options= placement: \"left\", hasArrow= true offsetOptions= 20 transitionStylesProps= duration: open: 1000, close: 2000, ,"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tooltip/page.tsx::Page_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tooltip/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/tooltip/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 2: > <button> Popover</button> </PopoverContent> <PopoverContent Content= <div className=\"p-8px border-1px border-solid border-#000000\"> Top Popover with arrow </div> trigger=\"click\" options= placement: \"top\", hasArrow= true offsetOptions= 20 transitionStylesProps= duration: open: 1000, close: 2000, , > <button> Popover</button> </PopoverContent> <PopoverContent Content= <div className=\"p-8px border-1px border-solid border-#000000\"> Bottom Popover without arrow </div> trigger=\"click\" options="
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tooltip/page.tsx::Page_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tooltip/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/tooltip/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 3: placement: \"bottom\", hasArrow= false offsetOptions= 20 transitionStylesProps= duration: open: 1000, close: 2000, , > <button> Popover</button> </PopoverContent> <PopoverContent Content= <div className=\"p-8px border-1px border-solid border-#000000\"> Right Popover with custom arrow </div> trigger=\"click\" options= placement: \"right\", hasArrow= true offsetOptions= 20 transitionStylesProps= duration: open: 1000, close: 2000, , arrowProps= d: \"M13 3124 7 5703L11 0022 2 88933L8 69199 7 5703L3 52624 8"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tooltip/page.tsx::Page_code_3",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tooltip/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/tooltip/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 4: 32092L7 26421 11 9645L6 38179 17 1094L11 0022 14 6803L15 6226 17 1094L14 7402 11 9645L18 4781 8 32092L13 3124 7 5703ZM20 7992 7 14245C21 1683 7 19608 21 3157 7 64967 21 0486 7 91001L16 3519 12 4882L17 4606 18 9528C17 5237 19 3204 17 1378 19 6007 16 8077 19 4271L11 0022 16 375L5 19666 19 4271C4 86653 19 6007 4 48068 19 3204 4 54373 18 9528L5 65249 12 4882L0 955723 7 91001C0 68864 7 64967 0 836019 7 19608 1 20512 7 14245L7 69589 6 19929L10 5986 0 317648C10 7637 -0 0168128 11 2406 -0 0168115 11"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tooltip/page.tsx::Page_code_4",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tooltip/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/tooltip/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 5: 4057 0 317649L14 3085 6 19929L20 7992 7 14245Z\", fill: \"#70856E\", > <button> Popover</button> </PopoverContent> </div> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tab/page.tsx::Page_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tab/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/tab/page.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Page | Description: A Page page component. | Location: app/tab/page.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tab/page.tsx::Page_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tab/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/tab/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 1: 'use client' const items = [ id: 1, title: 'Tab 1', content: <div>Tab 1 Content</div>, , id: 2, title: 'Tab 2', content: <div>Tab 2 Content</div>, , id: 3, title: 'Tab 3', content: <div>Tab 3 Content</div>, , ] const cardItems = [ id: 1, title: 'Tab 1', children: <div>Tab 1 Content</div>, , id: 2, title: 'Tab 2', children: <div>Tab 2 Content</div>, , id: 3, title: 'Tab 3', children: <div>Tab 3 Content</div>, , ] const TabsPage: React"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tab/page.tsx::Page_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tab/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/tab/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 2: FC = () => ( <div className=\"flex flex-col items-center justify-center gap-y-40px min-h-100vh\"> <div className=\"flex flex-col gap-y-[24px]\"> <div className=\"text-[20px] font-medium\">Default style</div> /* <div className=\"flex flex-col gap-y-24px bg-[#ffffff] rounded-16px border border-[rgba(235,237,240,1)] border-dashed\"> */ <BasicTabs items= items defaultActiveId= 1 bodyClassName=\"min-w-[300px] h-[128px]\" /> /* </div> */"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tab/page.tsx::Page_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/tab/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/tab/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 3: </div> <div className=\"flex flex-col gap-y-[24px]\"> <div className=\"text-[20px] font-medium\">Customized style</div> /* <div className=\"flex flex-col gap-y-24px bg-#ffffff rounded-16px border border-[rgba(235,237,240,1)] border-dashed\"> */ <Tabs items= cardItems defaultActiveId= 1 type=\"card\" bodyClassName=\"py-[25px] px-[23px] min-w-[300px] h-[128px] bg-[#bcb4c8] rounded-tr-[15px] rounded-b-[15px] box-border\" /> /* </div> */ </div> </div> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/select/page.tsx::Page_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/select/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/select/page.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Page | Description: A Page page component. | Location: app/select/page.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/select/page.tsx::Page_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/select/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/select/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 1: 'use client' const DummyOptions = [ label: 'Option 1', value: 'option1' , label: 'Option 2', value: 'option2' , label: 'Option 3', value: 'option3' , ] interface FakeSelectForm selectData: string[] multipleSelect: string[] const SelectPage: React FC = () => const register, handleSubmit: withSubmit, formState: errors = useForm<FakeSelectForm>() const handleSubmit = useCallback((data: FakeSelectForm) => console log(data) , []) return ( <div> <form onSubmit= withSubmit(handleSubmit)"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/select/page.tsx::Page_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/select/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/select/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 2: > <Select options= DummyOptions register('selectData', required: true ) /> <Select options= DummyOptions mode='multiple' register('multipleSelect', required: true ) /> <input type=\"submit\" value=\"submit\" /> </form> </div> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/popup/page.tsx::Page_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/popup/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/popup/page.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Page | Description: A Page page component. | Location: app/popup/page.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/popup/page.tsx::Page_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/popup/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/popup/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 1: \"use client\" const SampleModal: React FC = () => return <div className=\"h-300px w-300px\">This is a Modal</div> const ToastPage: React FC = () => const handleShowToast = useCallback(() => showToast( type: \"success\", content: \"This is a toast\", className: \"border-1px border-#1E8E3E border-solid\", ) , []) const handleShowModal = useCallback(() => showModal( title:'',content: <SampleModal /> ) , [])"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/popup/page.tsx::Page_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/popup/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/popup/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 2: return ( <div className=\"w-full flex flex-col items-center gap-y-24px\"> <div className=\"w-4/5\"> <button onClick= handleShowToast >Show Toast</button> </div> <div className=\"w-4/5\"> <button onClick= handleShowModal >Show Modal</button> </div> </div> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/modal/page.tsx::Page_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/modal/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/modal/page.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Page | Description: A Page page component. | Location: app/modal/page.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/modal/page.tsx::Page_code",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/modal/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/modal/page.tsx",
    "chunk_type": "code",
    "text": "Page implementation: 'use client'; const ModalPage: React.FC = () => { return ( <div className=\"flex flex-col items-center justify-center gap-y-40px min-h-100vh\"> <button className=\"px-4 py-2 text-white bg-blue-500 rounded-md\" onClick={() => { showModal({ title: 'Modal Title', content: <div>Modal Content</div>, }); }} > Show Modal </button> </div> ); };"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/mask/page.tsx::Page_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/mask/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/mask/page.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Page | Description: A Page page component with stateful capabilities. | Location: app/mask/page.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/mask/page.tsx::Page_code",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/mask/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/mask/page.tsx",
    "chunk_type": "code",
    "text": "Page implementation: \"use client\"; const MaskPage: React.FC = () => { const [open, setOpen] = useState(false); return ( <div className=\"flex flex-row items-center justify-center w-screen h-screen bg-#fffffff\"> <button onClick={() => setOpen((pre) => !pre)}>toggle Open</button> <h1 className=\"text-black\">Mask</h1> <Mask open={open} /> </div> ); };"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/button/page.tsx::Page_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/button/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/button/page.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Page | Description: A Page page component. | Location: app/button/page.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/button/page.tsx::Page_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/button/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/button/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 1: const ButtonPage: React FC = () =>"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/button/page.tsx::Page_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/button/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/button/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 2: return ( <main className=\"w-screen h-screen flex flex-col items-center gap-24px\"> <div className=\"flex flex-row gap-x-16px\"> <Button variant=\"contained\">contained</Button> <Button variant=\"text\">text</Button> <Button variant=\"outlined\">outlined</Button> </div> <div className=\"flex flex-row gap-x-16px\"> <Button color=\"primary\">primary</Button> <Button color=\"green\">green</Button> <Button color=\"white\">white</Button> </div> <div className=\"flex flex-row gap-x-16px\"> <Button size=\"mini\">mini</Button> <Button size=\"small\">small</Button> <Button size=\"medium\">medium</Button> <Button size=\"large\">large</Button> </div> <div className=\"w-2/5\"> <Button fullWidth>fullWidth</Button> </div> <div> <Button color=\"white\" loading="
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/button/page.tsx::Page_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/app/button/page.tsx::Page",
    "component_name": "Page",
    "file": "Custom-ui/src/app/button/page.tsx",
    "chunk_type": "code",
    "text": "Page code part 3: true > loading </Button> </div> <div className=\"flex flex-row gap-x-16px\"> <Button startIcon= <StarIcon /> >startIcon</Button> <Button endIcon= <StarIcon /> >endIcon</Button> </div> </main> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Pagination/index.tsx::Pagination_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Pagination/index.tsx::Pagination",
    "component_name": "Pagination",
    "file": "Custom-ui/src/components/Pagination/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Pagination | Description: A Pagination page component. | Location: components/Pagination/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Pagination/index.tsx::Pagination_props",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Pagination/index.tsx::Pagination",
    "component_name": "Pagination",
    "file": "Custom-ui/src/components/Pagination/index.tsx",
    "chunk_type": "props",
    "text": "Pagination component props: | currentPage - type: number - description: Numeric value for currentPage - required | totalPages - type: number - description: Numeric value for totalPages - required | onPageChange - type: (page: number) => void - description: Event handler for pagechange - required"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Pagination/index.tsx::Pagination_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Pagination/index.tsx::Pagination",
    "component_name": "Pagination",
    "file": "Custom-ui/src/components/Pagination/index.tsx",
    "chunk_type": "code",
    "text": "Pagination code part 1: interface PaginationProps extends ComponentProps<\"div\"> currentPage: number totalPages: number onPageChange: (page: number) => void const Pagination: React FC<PaginationProps> = ( currentPage, totalPages, onPageChange, className, props ) => const renderPageNumbers = () => const adjacentPageCount = 2 const pageNumbers = Array from( length: totalPages , (_, index) => index + 1 ) const visiblePages = pageNumbers"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Pagination/index.tsx::Pagination_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Pagination/index.tsx::Pagination",
    "component_name": "Pagination",
    "file": "Custom-ui/src/components/Pagination/index.tsx",
    "chunk_type": "code",
    "text": "Pagination code part 2: filter( (page) => page === 1 || page === totalPages || (page >= currentPage - adjacentPageCount && page <= currentPage + adjacentPageCount) ) const pagesWithEllipses: (number | null)[] = [] let lastPage = 0 visiblePages forEach((page) => if (lastPage !== 0 && page - lastPage > 1) pagesWithEllipses push(null) pagesWithEllipses push(page) lastPage = page ) return pagesWithEllipses map((page) => page !== null ? ( <PaginationContainer> <button key= page onClick= () => onPageChange(page) > page"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Pagination/index.tsx::Pagination_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Pagination/index.tsx::Pagination",
    "component_name": "Pagination",
    "file": "Custom-ui/src/components/Pagination/index.tsx",
    "chunk_type": "code",
    "text": "Pagination code part 3: </button> </PaginationContainer> ) : ( <span key=\"ellipsis\"> </span> ) ) return ( <div className= cx(\"flex flex-row items-center justify-center\", className) props > <button onClick= () => onPageChange(currentPage - 1) disabled= currentPage === 1 > Previous </button> renderPageNumbers() <button onClick= () => onPageChange(currentPage + 1) disabled= currentPage === totalPages > Next </button> </div> ) const PaginationContainer: React FC<PropsWithChildren> = ( children ) =>"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Pagination/index.tsx::Pagination_code_3",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Pagination/index.tsx::Pagination",
    "component_name": "Pagination",
    "file": "Custom-ui/src/components/Pagination/index.tsx",
    "chunk_type": "code",
    "text": "Pagination code part 4: return ( <div className=\"w-[30px] h-[30px] border border-solid hover:border-[#ffffff]\"> children </div> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/PinForm/index.tsx::PinForm_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/PinForm/index.tsx::PinForm",
    "component_name": "PinForm",
    "file": "Custom-ui/src/components/PinForm/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: PinForm | Description: A input component. | Location: components/PinForm/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/PinForm/index.tsx::PinForm_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/PinForm/index.tsx::PinForm",
    "component_name": "PinForm",
    "file": "Custom-ui/src/components/PinForm/index.tsx",
    "chunk_type": "code",
    "text": "PinForm code part 1: pin1: string pin2: string pin3: string pin4: string pin5: string pin6: string const submitPin = async (pin: PinFormData) => const fakedPromise = new Promise((resolve, reject) => setTimeout(() => resolve('success') , 1000) ) await fakedPromise return submitPin const SentForm: React FC = () => const submitPin = useSubmitPin() const inputs = useRef<HTMLInputElement[]>([]) const register, handleSubmit: withSubmit, formState: errors , setValue,"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/PinForm/index.tsx::PinForm_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/PinForm/index.tsx::PinForm",
    "component_name": "PinForm",
    "file": "Custom-ui/src/components/PinForm/index.tsx",
    "chunk_type": "code",
    "text": "PinForm code part 2: = useForm<PinFormData>() const handleSubmit = useCallback( async (data: PinFormData) => await submitPin(data) , [submitPin] ) const handleKeyDown = useCallback( (e: React KeyboardEvent<HTMLInputElement>, index: number) => if (!/\\d/ test(e key)) return e preventDefault() setValue(`pin$ index + 1 ` as keyof PinFormData, e key) (e target as any) value = e key if (index === 5) withSubmit(handleSubmit)() return (e target as any) form elements[index + 1] focus() , [] ) return ( <form onSubmit="
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/PinForm/index.tsx::PinForm_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/PinForm/index.tsx::PinForm",
    "component_name": "PinForm",
    "file": "Custom-ui/src/components/PinForm/index.tsx",
    "chunk_type": "code",
    "text": "PinForm code part 3: withSubmit(handleSubmit) className=\"flex flex-col items-center w-full gap-y-[16px]\" > <div> You would recieve a pin number if the email is registered in our database </div> <div className=\"grid grid-cols-6 gap-x-[8px] w-full max-w-[384px]\"> Array from( length: 6 ) map((_, index) => ( <Input register(`pin$ index + 1 ` as keyof PinFormData, required: true, maxLength: 1, min: 0, max: 9, ) key= index autoFocus= index === 0 ref= (el: HTMLInputElement) => inputs current[index] = el onKeyDown="
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/PinForm/index.tsx::PinForm_code_3",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/PinForm/index.tsx::PinForm",
    "component_name": "PinForm",
    "file": "Custom-ui/src/components/PinForm/index.tsx",
    "chunk_type": "code",
    "text": "PinForm code part 4: (e) => handleKeyDown(e, index) /> )) </div> <Button color=\"white\" type=\"submit\" className=\"w-full\"> Submit </Button> </form> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover",
    "component_name": "Popover",
    "file": "Custom-ui/src/components/Popover/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Popover | Description: A tooltip component with stateful capabilities. | Location: components/Popover/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover_props",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover",
    "component_name": "Popover",
    "file": "Custom-ui/src/components/Popover/index.tsx",
    "chunk_type": "props",
    "text": "Popover component props: | Content - type: React.ReactNode - description: React element for Content - required | options - type: Partial<UseFloatingOptions> - description: Property: options - optional | trigger - type: 'click' | 'hover' | 'focus' - description: Union type value for trigger - optional | hasArrow - type: boolean - description: Boolean flag indicating sarrow - optional | offsetOptions - type: OffsetOptions - description: Property: offsetOptions - optional | transitionStylesProps - type: UseTransitionStylesProps - description: Property: transitionStylesProps - optional | arrowProps - type: ArrowProps - description: Property: arrowProps - optional | interactionProps - type: UseHoverProps | UseClickProps | UseFocusProps - description: Union type value for interactionProps - optional | dismissProps - type: UseDismissProps - description: Property: dismissProps - optional"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover",
    "component_name": "Popover",
    "file": "Custom-ui/src/components/Popover/index.tsx",
    "chunk_type": "code",
    "text": "Popover code part 1: 'use client' useFloating, UseFloatingOptions, autoUpdate, useFocus, useClick, useInteractions, useHover, useDismiss, FloatingArrow, arrow, offset, OffsetOptions, useTransitionStyles, UseTransitionStylesProps, from '@floating-ui/react' UseHoverProps, UseClickProps, UseFocusProps, UseDismissProps, FloatingArrowProps, from '@floating-ui/react' interface ArrowProps extends Omit<FloatingArrowProps, 'context'>, SVGAttributes<SVGSVGElement> height?: number width?: number strokeWidth?: number"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover",
    "component_name": "Popover",
    "file": "Custom-ui/src/components/Popover/index.tsx",
    "chunk_type": "code",
    "text": "Popover code part 2: Content: React ReactNode options?: Partial<UseFloatingOptions> trigger?: 'click' | 'hover' | 'focus' hasArrow?: boolean offsetOptions?: OffsetOptions transitionStylesProps?: UseTransitionStylesProps arrowProps?: ArrowProps interactionProps?: UseHoverProps | UseClickProps | UseFocusProps dismissProps?: UseDismissProps const Popover: React FC<PopoverProps> = ( Content, options, trigger, hasArrow, arrowProps, offsetOptions, transitionStylesProps, interactionProps, dismissProps, children, ) =>"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover",
    "component_name": "Popover",
    "file": "Custom-ui/src/components/Popover/index.tsx",
    "chunk_type": "code",
    "text": "Popover code part 3: const [isOpen, setIsOpen] = useState(false) const arrowRef = useRef(null) const refs, floatingStyles, context = useFloating( middleware: [ arrow( element: arrowRef, ), offset(offsetOptions), ], whileElementsMounted: autoUpdate, open: isOpen, onOpenChange: setIsOpen, options, ) const triggerOption = () => switch (trigger) case 'click': return useClick(context, interactionProps) case 'focus': return useFocus(context, interactionProps) case 'hover': return useHover(context, interactionProps)"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover_code_3",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover",
    "component_name": "Popover",
    "file": "Custom-ui/src/components/Popover/index.tsx",
    "chunk_type": "code",
    "text": "Popover code part 4: const dismiss = useDismiss(context, dismissProps) const getReferenceProps, getFloatingProps = useInteractions([ triggerOption(), dismiss, ]) const isMounted, styles = useTransitionStyles(context, transitionStylesProps, ) return ( <> <div ref= refs setReference getReferenceProps() > children </div> isOpen && isMounted && ( <div ref= refs setFloating style= floatingStyles, styles getFloatingProps() > hasArrow && ( <FloatingArrow ref= arrowRef context= context arrowProps /> ) <> Content </> </div> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover_code_4",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Popover/index.tsx::Popover",
    "component_name": "Popover",
    "file": "Custom-ui/src/components/Popover/index.tsx",
    "chunk_type": "code",
    "text": "Popover code part 5: </> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate",
    "component_name": "Rate",
    "file": "Custom-ui/src/components/Rate/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Rate | Description: A Rate layout component with stateful, side effects capabilities. | Location: components/Rate/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate",
    "component_name": "Rate",
    "file": "Custom-ui/src/components/Rate/index.tsx",
    "chunk_type": "code",
    "text": "Rate code part 1: ComponentProps, MouseEvent, useCallback, useRef, useEffect, useState, useLayoutEffect, from \"react\" CommentEllipseIcon, CommentEllipseFocusIcon, from \"@/components/Icons\" const Rate: React FC< ComponentProps<\"div\"> & width?: number disable?: boolean initialValue?: number > = ( width, disable = false, initialValue, props ) => const [origionX, setOrigionX] = useState< left: number right: number >( left: 0, right: 0, ) const [pressing, setPressing] = useState(false)"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate",
    "component_name": "Rate",
    "file": "Custom-ui/src/components/Rate/index.tsx",
    "chunk_type": "code",
    "text": "Rate code part 2: const [x, setX] = useState(width ?? 0 / 2) let containerRef = useRef<HTMLDivElement>(null) const handleDisable = useCallback((e: MouseEvent) => e preventDefault() , []) const handleMouseMove = useCallback( (e: MouseEvent) => let leftX = Math floor(e clientX - origionX left) if ( pressing && leftX >= 0 && periodToPersent(leftX, origionX right - origionX left, 120) <= 120 ) setX(leftX) , [pressing] ) const handleMouseDone = useCallback((e: MouseEvent) => setPressing(true) , [])"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate",
    "component_name": "Rate",
    "file": "Custom-ui/src/components/Rate/index.tsx",
    "chunk_type": "code",
    "text": "Rate code part 3: const handleMouseUp = useCallback((e: MouseEvent) => setPressing(false) , []) const getClientX = useCallback(() => const element = containerRef current if (element) const rect = element getBoundingClientRect() const leftX = rect left const rightX = rect right setOrigionX( left: leftX, right: rightX ) , [containerRef]) useEffect(() => setTimeout(() => getClientX(), 200) , [containerRef]) const handleResize = useCallback(() => getClientX() if (containerRef current) const testedWidth = containerRef"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate_code_3",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate",
    "component_name": "Rate",
    "file": "Custom-ui/src/components/Rate/index.tsx",
    "chunk_type": "code",
    "text": "Rate code part 4: current offsetWidth setX(PersentToPeriod(initialValue!, testedWidth, 120) + 1) , [containerRef]) useLayoutEffect(() => if (!initialValue) return if (width) setX(PersentToPeriod(initialValue, width, 120)) return handleResize() window addEventListener(\"resize\", handleResize) return () => window removeEventListener(\"resize\", handleResize) , [containerRef]) return ( <div props onMouseMove= disable ? handleDisable : handleMouseMove ref= containerRef"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate_code_4",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate",
    "component_name": "Rate",
    "file": "Custom-ui/src/components/Rate/index.tsx",
    "chunk_type": "code",
    "text": "Rate code part 5: className=\"relative w-full h-8px bg-#DCDEE0 rounded-41px\" onMouseLeave= disable ? handleDisable : handleMouseUp aria-disabled > <div className= cx( \"h-full rounded-l-41px\", pressing ? \"bg-#F48A28\" : \"bg-#FFA14A\" ) style= width: `$ x + 1 px` /> <ToolTip text= `$ periodToPersent(x, origionX right - origionX left, 120) ` > <CommentEllipseIcon onMouseDown= disable ? handleDisable : handleMouseDone onMouseUp= disable ? handleDisable : handleMouseUp className="
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate_code_5",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Rate/index.tsx::Rate",
    "component_name": "Rate",
    "file": "Custom-ui/src/components/Rate/index.tsx",
    "chunk_type": "code",
    "text": "Rate code part 6: cx( \"absolute top-50% -translate-y-50% cursor-pointer z-20\" ) style= left: `$ x - 14 px` iconClassName=\"hover:stroke-#F48A28\" /> </ToolTip> pressing && ( <CommentEllipseFocusIcon className= cx( \"absolute top-50% -translate-y-50% cursor-pointer z-10\" ) style= left: `$ x - 20 px` /> ) </div> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/utils/rateUtils.ts::RateUtils_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/utils/rateUtils.ts::RateUtils",
    "component_name": "RateUtils",
    "file": "Custom-ui/src/utils/rateUtils.ts",
    "chunk_type": "basic_info",
    "text": "Component: RateUtils | Description: A functional React component. | Location: src/utils/rateUtils.ts"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/utils/rateUtils.ts::RateUtils_code",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/utils/rateUtils.ts::RateUtils",
    "component_name": "RateUtils",
    "file": "Custom-ui/src/utils/rateUtils.ts",
    "chunk_type": "code",
    "text": "RateUtils implementation: return Math.floor((period / width) * max); }; percent: number, width: number, max: number ) => { return Math.floor((width / max) * percent); };"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/utils/renderReactNode.ts::RenderReactNode_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/utils/renderReactNode.ts::RenderReactNode",
    "component_name": "RenderReactNode",
    "file": "Custom-ui/src/utils/renderReactNode.ts",
    "chunk_type": "basic_info",
    "text": "Component: RenderReactNode | Description: A functional React component. | Location: src/utils/renderReactNode.ts"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/utils/renderReactNode.ts::RenderReactNode_code",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/utils/renderReactNode.ts::RenderReactNode",
    "component_name": "RenderReactNode",
    "file": "Custom-ui/src/utils/renderReactNode.ts",
    "chunk_type": "code",
    "text": "RenderReactNode implementation: const renderReactNode = ( ele: ReactNode | Function, props?: Record<string, any> ) => { let node: React.ReactElement<any>; if (typeof ele === \"function\") { node = ele(); } else if ( typeof ele === \"object\" && typeof (ele as any)?.render === \"function\" ) { node = (ele as any).render(); } else { if (!props) { node = ele as ReactElement<any>; } else { node = cloneElement(ele as ReactElement<any>, props); } } if (!isValidElement(node)) { return null; } return node; };"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select",
    "component_name": "Select",
    "file": "Custom-ui/src/components/Select/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Select | Description: e.preventDefault(); | Location: components/Select/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select",
    "component_name": "Select",
    "file": "Custom-ui/src/components/Select/index.tsx",
    "chunk_type": "code",
    "text": "Select code part 1: 'use client' useFloating, autoUpdate, useClick, useInteractions, useDismiss, offset, type Placement, from '@floating-ui/react' interface Option label: string value: string | number type SelectProps = OverWrite< ComponentProps<'select'>, placeholder?: string placement?: Placement options: Option[] defaultValue?: Option[] mode?: 'single' | 'multiple' optionClassName?: string > const Select: React FC<SelectProps> = ("
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select",
    "component_name": "Select",
    "file": "Custom-ui/src/components/Select/index.tsx",
    "chunk_type": "code",
    "text": "Select code part 2: options, className, optionClassName, defaultValue, placeholder = 'Select', placement = 'bottom', mode = 'single', onChange, name, ref, props ) => const [selectedOptions, setSelectedOptions] = useState<Option[] | undefined>( defaultValue ) const [isOpen, setIsOpen] = useState(false) const refs, floatingStyles, context = useFloating( middleware: [offset(4)], placement: placement, whileElementsMounted: autoUpdate, open: isOpen, onOpenChange: setIsOpen, ) const click = useClick(context,"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select",
    "component_name": "Select",
    "file": "Custom-ui/src/components/Select/index.tsx",
    "chunk_type": "code",
    "text": "Select code part 3: event: 'mousedown' ) const dismiss = useDismiss(context, outsidePressEvent: 'mousedown' ) const getReferenceProps, getFloatingProps = useInteractions([ click, dismiss, ]) const handleSelect = useCallback( (option: Option) => let newVal if (selectedOptions? some((ele) => ele value === option value)) newVal = selectedOptions? filter( (ele) => ele value !== option value ) else newVal = mode === 'single' ? [option] : [ (selectedOptions || []), option] setSelectedOptions(newVal) setIsOpen(false)"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select_code_3",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select",
    "component_name": "Select",
    "file": "Custom-ui/src/components/Select/index.tsx",
    "chunk_type": "code",
    "text": "Select code part 4: onChange? ( target: value: newVal, name as any) , [onChange, selectedOptions] ) return ( <div className=\"relative\" suppressHydrationWarning> <div ref= refs setReference getReferenceProps() className= cx( 'pl-[12px] pr-[7px] flex items-center justify-between w-[240px] h-[32px] text-[14px] leading-[22px] rounded-[8px] border-[#DCDEE0] border-[1px] border-solid focus:border-[#FFA14A] hover:border-[#FFA14A] cursor-pointer', isOpen && 'border-[#FFA14A]', className ) >"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select_code_4",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select",
    "component_name": "Select",
    "file": "Custom-ui/src/components/Select/index.tsx",
    "chunk_type": "code",
    "text": "Select code part 5: selectedOptions ? ( <span className=\"text-[#323233]\"> selectedOptions map((opts) => opts label) join(', ') </span> ) : ( <span className=\"text-[#C1C2C5]\"> placeholder </span> ) /* <div className=\"flex items-center justify-center w-18px h-18px\"> */ /* TODO: clear selected */ /* !isOpen && isHover && selectedOption && ( <div className=\"i-ic:sharp-cancel text-#595A5B cursor-pointer z-200\" onClick= (e) => handleClear(e) /> ) */ /*"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select_code_5",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Select/index.tsx::Select",
    "component_name": "Select",
    "file": "Custom-ui/src/components/Select/index.tsx",
    "chunk_type": "code",
    "text": "Select code part 6: !isOpen && (!isHover || !selectedOption) && ( <span className=\"i-octicon:triangle-down-16 text-#595A5B\" /> ) isOpen && <span className=\"i-octicon:triangle-up-16 text-[#595A5B]\" /> */ /* </div> */ </div> isOpen && ( <div className=\"w-[240px] rounded-[2px] shadow-[0px_2px_8px_0px_rgba(0,0,0,0 12)]"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal",
    "component_name": "showModal",
    "file": "Custom-ui/src/components/Modal/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: showModal | Description: A modal component with stateful capabilities. | Location: components/Modal/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal_props",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal",
    "component_name": "showModal",
    "file": "Custom-ui/src/components/Modal/index.tsx",
    "chunk_type": "props",
    "text": "showModal component props: | title - type: enum - optional | headClass - type: enum - optional | content - type: ReactNode - required | className - type: enum - optional | iconClass - type: enum - optional"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal",
    "component_name": "showModal",
    "file": "Custom-ui/src/components/Modal/index.tsx",
    "chunk_type": "code",
    "text": "showModal code part 1: 'use client' useFloating, useClick, useDismiss, useRole, useInteractions, FloatingOverlay, FloatingFocusManager, from '@floating-ui/react' interface Modal title?: string headClass?: string content: ReactNode className?: string iconClass?: string id: string interface ModalStore modal: Modal | null showModal: (newModal: Modal) => void hideModal: () => void const modalStore = create<ModalStore>((set) => ( modal: null, showModal: (newModal: Modal) => set( modal: newModal ), hideModal: () => set("
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal",
    "component_name": "showModal",
    "file": "Custom-ui/src/components/Modal/index.tsx",
    "chunk_type": "code",
    "text": "showModal code part 2: modal: null ), )) modalStore setState( modal: title: param title, content: param content, className: param className ?? '', headClass: param headClass ?? '', id: uniqueId(), , ) modalStore setState( modal: null ) const modal = modalStore((state) => state modal) const transitions = useTransition(modal, transitionAnimation zoom, ) const handleDismiss = useCallback( (open: boolean, event?: Event) => if (!open) hideModal() , [hideModal] ) const refs, context = useFloating("
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal",
    "component_name": "showModal",
    "file": "Custom-ui/src/components/Modal/index.tsx",
    "chunk_type": "code",
    "text": "showModal code part 3: open: !!modal, onOpenChange: handleDismiss, ) const dismiss = useDismiss(context, outsidePressEvent: 'mousedown', ) const getFloatingProps = useInteractions([dismiss]) if (!modal) return <></> return transitions((style, item) => ( <> item && ( (<FloatingOverlay lockScroll style= background: 'rgba(0, 0, 0, 0 6)' className=\"flex flex-col items-center justify-center\" > <FloatingFocusManager context= context > <div ref= refs setFloating getFloatingProps() > <AnimatedDiv style= style className="
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal_code_3",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal",
    "component_name": "showModal",
    "file": "Custom-ui/src/components/Modal/index.tsx",
    "chunk_type": "code",
    "text": "showModal code part 4: cx( 'relative flex flex-col jusity-center rounded-[8px] bg-[#FFFFFF] overflow-hidden dropdown-shadow z-[200]', item className ) > <div className= cx( 'px-[24px] flex justify-between items-center h-[40px] text-[14px] leading-[22px] text-[#111111] font-medium', item headClass ) > item title <div className=\"text-[14px] text-[#606266] cursor-pointer\" onClick= hideModal > <CloseIcon /> </div> </div> /* Divider between header and body */"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal_code_4",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Modal/index.tsx::showModal",
    "component_name": "showModal",
    "file": "Custom-ui/src/components/Modal/index.tsx",
    "chunk_type": "code",
    "text": "showModal code part 5: <div className=\"h-[1px] bg-[#EBEDF0] pointer-events-none\" /> <div className=\"pt-[24px] px-[24px]\"> renderReactNode(item content) </div> </AnimatedDiv> </div> </FloatingFocusManager> </FloatingOverlay>) ) </> ))"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Toast/index.tsx::showToast_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Toast/index.tsx::showToast",
    "component_name": "showToast",
    "file": "Custom-ui/src/components/Toast/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: showToast | Description: A card component. | Location: components/Toast/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Toast/index.tsx::showToast_props",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Toast/index.tsx::showToast",
    "component_name": "showToast",
    "file": "Custom-ui/src/components/Toast/index.tsx",
    "chunk_type": "props",
    "text": "showToast component props: | content - type: any - required | type - type: enum - required | className - type: enum - optional | key - type: enum - optional | duration - type: enum - optional"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Toast/index.tsx::showToast_code_0",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Toast/index.tsx::showToast",
    "component_name": "showToast",
    "file": "Custom-ui/src/components/Toast/index.tsx",
    "chunk_type": "code",
    "text": "showToast code part 1: \"use client\" interface Toast content: string | React ReactNode type: \"success\" | \"warning\" | \"failed\" className?: string id: string interface ToastStore toasts: Toast[] setToast: (newToasts: Toast[]) => void const toastsStore = create<ToastStore>((set) => ( toasts: [], setToast: (newToasts) => set( toasts: newToasts ), )) param: Omit<Toast, \"id\"> & key?: string duration?: number ) => let cur = toastsStore getState() toasts if ( param key && cur find( (item: Toast & key?: string ) => item"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Toast/index.tsx::showToast_code_1",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Toast/index.tsx::showToast",
    "component_name": "showToast",
    "file": "Custom-ui/src/components/Toast/index.tsx",
    "chunk_type": "code",
    "text": "showToast code part 2: key && item key === param key ) ) return const newArr = cur ? [ cur] : [] const id = uniqueId() newArr push( param, id ) toastsStore setState( toasts: [ newArr] ) setTimeout(() => let curAfter = toastsStore getState() toasts let newAfter = curAfter ? [ curAfter] : [] newAfter = newAfter filter((toast) => toast id !== id) toastsStore setState( toasts: [ newAfter] ) , param duration ?? 3000) const toasts = toastsStore((state) => state toasts) const hide = useCallback((id: string) =>"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Toast/index.tsx::showToast_code_2",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Toast/index.tsx::showToast",
    "component_name": "showToast",
    "file": "Custom-ui/src/components/Toast/index.tsx",
    "chunk_type": "code",
    "text": "showToast code part 3: let cur = toastsStore getState() toasts let index = cur findIndex((e) => e id === id) if (index === -1) return cur cur splice(index, 1) toastsStore setState( toasts: [ cur] ) , []) return ( <div className=\"fixed left-0 top-[5%] right-0 flex flex-col justify-center items-center gap-[12px] z-40\"> toasts map(( content, type, id, className ) => ( <div key= id className="
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Toast/index.tsx::showToast_code_3",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Toast/index.tsx::showToast",
    "component_name": "showToast",
    "file": "Custom-ui/src/components/Toast/index.tsx",
    "chunk_type": "code",
    "text": "showToast code part 4: cx( \"px-[24px] h-48px flex justify-between items-center gap-x-16px bg-#ffffff rounded-2px z-40 task-card-shadow\", type === \"success\" && \"text-#1E8E3E\", type === \"warning\" || (type === \"failed\" && \"text-#D93026\"), className ) > type === \"success\" ? <CheckedIcon /> : <FailedIcon /> content /* <div className=\"i-ep:close-bold cursor-pointer\" onClick= (e) => hide(id) ></div> */ </div> )) </div> )"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Spin/index.tsx::Spin_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Spin/index.tsx::Spin",
    "component_name": "Spin",
    "file": "Custom-ui/src/components/Spin/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: Spin | Description: A Spin page component. | Location: components/Spin/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Spin/index.tsx::Spin_props",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Spin/index.tsx::Spin",
    "component_name": "Spin",
    "file": "Custom-ui/src/components/Spin/index.tsx",
    "chunk_type": "props",
    "text": "Spin component props: | svg - type: ReactNode - description: React element for svg - optional | springConf - type: object - description: Property: springConf - optional"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Spin/index.tsx::Spin_code",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Spin/index.tsx::Spin",
    "component_name": "Spin",
    "file": "Custom-ui/src/components/Spin/index.tsx",
    "chunk_type": "code",
    "text": "Spin implementation: \"use client\"; interface SpinProps extends HTMLAttributes<HTMLDivElement> { svg?: ReactNode; springConf?: object; } const Spin: React.FC<SpinProps> = ({ className, springConf, svg, ...props }) => { const springs = useSpring(springConf ? { ...springConf } : { ...rotate }); return ( <AnimatedDiv style={{ ...springs }} className={cx(\"relative flex justify-center items-center\", className)} {...props} > {svg ? ( <>{svg}</> ) : ( <svg viewBox=\"25 25 50 50\"> <circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" className=\"path\" /> </svg> )} </AnimatedDiv> ); };"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/TabContent/index.tsx::TabContent_basic",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/TabContent/index.tsx::TabContent",
    "component_name": "TabContent",
    "file": "Custom-ui/src/components/Tabs/TabContent/index.tsx",
    "chunk_type": "basic_info",
    "text": "Component: TabContent | Description: A functional React component. | Location: Tabs/TabContent/index.tsx"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/TabContent/index.tsx::TabContent_props",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/TabContent/index.tsx::TabContent",
    "component_name": "TabContent",
    "file": "Custom-ui/src/components/Tabs/TabContent/index.tsx",
    "chunk_type": "props",
    "text": "TabContent component props: | id - type: number - description: Unique identifier - required | activeId - type: number - description: Numeric value for activeId - required"
  },
  {
    "chunk_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/TabContent/index.tsx::TabContent_code",
    "component_id": "/Users/lakmal/Projects/vsProjects/AIML/poc_rag_builder/Custom-ui/src/components/Tabs/TabContent/index.tsx::TabContent",
    "component_name": "TabContent",
    "file": "Custom-ui/src/components/Tabs/TabContent/index.tsx",
    "chunk_type": "code",
    "text": "TabContent implementation: interface TabContentProps extends PropsWithChildren { id: number; activeId: number; } const TabContent: React.FC<TabContentProps> = ({ id, activeId, children }) => { return activeId === id ? <>{children}</> : null; };"
  }
]